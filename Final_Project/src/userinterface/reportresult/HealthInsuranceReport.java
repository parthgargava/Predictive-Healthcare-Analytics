/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.reportresult;

import business.enterprise.Enterprise;
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import weka.classifiers.Classifier;
import weka.classifiers.lazy.IBk;
import weka.core.Instance;
import weka.core.Instances;

/**
 *
 * @author Parth
 */
public class HealthInsuranceReport extends javax.swing.JPanel {

    public double class1;
    public double class2;
    public double class3;
    public double class4;
    double[] value=new double[100];
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    String[] name = new String[100];
    ArrayList<String[]> addresses = new ArrayList<String[]>();
    String[] myStringArray = new String[100];
      static  int counter = 0;

    /**
     * Creates new form lungCancerReport
     */
    public HealthInsuranceReport(JPanel userProcessContainer) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reportButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        insurancetable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(102, 102, 102));

        reportButton.setBackground(new java.awt.Color(0, 0, 0));
        reportButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        reportButton.setForeground(new java.awt.Color(255, 255, 255));
        reportButton.setText("Recommended insurance plans for each Individual");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });

        insurancetable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Person ID", "Person Name", "Insurance"
            }
        ));
        jScrollPane1.setViewportView(insurancetable);

        backJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backJButton.setForeground(new java.awt.Color(255, 255, 255));
        backJButton.setText("<<BACK");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(109, 109, 109)
                .addComponent(reportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(163, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(reportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(79, 79, 79)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed

        BufferedReader datafile = null;
        BufferedReader datainputfile = null;

        try {
            datafile = new BufferedReader(new FileReader("C:\\Users\\dsain\\Documents\\Final_Project\\dataForPrediction\\ads2.txt"));

            Instances data = new Instances(datafile);
            data.setClassIndex(data.numAttributes() - 1);

            Classifier ibk = new IBk();
            ibk.buildClassifier(data);

            datainputfile = new BufferedReader(new FileReader("C:\\Users\\dsain\\Documents\\Final_Project\\PatientData.txt"));
            Instances data2 = new Instances(datainputfile);
            data2.setClassIndex(data.numAttributes() - 1);
        
Instance[] input=new Instance[100];
           
            for (Instance instance : data2) {
                
                input[counter]=data2.instance(counter);
                counter++;                

            }
            //do not use first and second
//            Instance first = data2.instance(0);
//            Instance second = data2.instance(1);
//            Instance third = data2.instance(2);
//            Instance fourth = data2.instance(3);

            data2.delete(0);
            data2.delete(1);

            FileInputStream fstream = new FileInputStream("PatientNames.txt");
            BufferedReader br = new BufferedReader(new InputStreamReader(fstream));

            String strLine;

//Read File Line By Line
            int i = 0;
            while ((strLine = br.readLine()) != null) {
                // Print the content on the console

                name[i] = strLine.toString();
                i++;
            }
//Close the input stream
            br.close();

            for(i=0;i<counter;i++)
            {
            value[i]=ibk.classifyInstance(input[i]);
            if(value[i]==1.0)
            {
            myStringArray[i]="High premium needed";
            }
            else{
             myStringArray[i] = "Low premium needed";
            }
            }
       
//            class1 = ibk.classifyInstance(first);
//            class2 = ibk.classifyInstance(second);
//            class3 = ibk.classifyInstance(third);
//            class4 = ibk.classifyInstance(fourth);






//            if (class1 == 1.0) {
//                myStringArray[1] = "High premium needed by user 1";
//            } else {
//                myStringArray[1] = "Low premium needed by user 1";
//            }
//            if (class2 == 1.0) {
//                myStringArray[2] = "High premium needed by user 2";
//            } else {
//                myStringArray[2] = "Low premium needed by user 2";
//            }
//            if (class3 == 1.0) {
//                myStringArray[3] = "High premium needed by user 3";
//            } else {
//                myStringArray[3] = "Low premium needed by user 3";
//            }
//            if (class4 == 1.0) {
//                myStringArray[4] = "High premium needed by user 4";
//            } else {
//                myStringArray[4] = "Low premium needed by user 4";
//            }

        } catch (Exception ex) {
            System.err.println("Please check the input details again");
        }

        populateTable();

        // TODO add your handling code here:
    }//GEN-LAST:event_reportButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.remove(this);
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable insurancetable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reportButton;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel dtm = (DefaultTableModel) insurancetable.getModel();
        dtm.setRowCount(0);
        //Random rand = new Random();
        for (int i = 0; i < counter; i++) {
            //String val = "class" + i;
            Object[] row = new Object[3];
            row[0] = "Person" + i;
            row[1] = name[i];
            //row[2] = rand.nextInt(50) + 1;
            row[2] = myStringArray[i];
            dtm.addRow(row);
        }
//        for (Employee employee : organization.getEmployeeDirectory().getEmployeeDirectory()) {
//            row[0] = employee.getId();
//            row[1] = employee.getName();
//            dtm.addRow(row);
//        }
    }
}
